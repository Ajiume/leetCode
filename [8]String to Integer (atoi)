
	/**
	 * String to Integer (atoi)
	 * 
	 * Implement atoi to convert a string to an integer.
	 * 
	 * Hint: Carefully consider all possible input cases. If you want a
	 * challenge, please do not see below and ask yourself what are the possible
	 * input cases.
	 * 
	 * Notes: It is intended for this problem to be specified vaguely (ie, no
	 * given input specs). You are responsible to gather all the input
	 * requirements up front.
	 * 
	 * Update (2015-02-10): The signature of the C++ function had been updated.
	 * If you still see your function signature accepts a const char * argument,
	 * please click the reload button to reset your code definition.
	 * 
	 * spoilers alert... click to show requirements for atoi.
	 * 
	 * 1. 字串为空或者全是空格，返回0； 
	 * 2. 字串的前缀空格需要忽略掉； 
	 * 3.忽略掉前缀空格后，遇到的第一个字符，如果是‘+’或‘－’号，继续往后读；如果是数字，则开始处理数字；如果不是前面的2种，返回0；
	 *  4.处理数字的过程中，如果之后的字符非数字，就停止转换，返回当前值； 
	 *  5.在上述处理过程中，如果转换出的值超出了int型的范围，就返回int的最大值或最小值。
	 * 
	 */
	 
	 public int myAuto(String str){
	    if(str == null){
	        return 0;
	    }
	    str = str.trim();
	    if(str.length() == 0){
	        return 0;
	    }
	    int sign = 1;
	    int index = 0;
	    if(str.charAt(index) == '+'){
	        index++;
	    }else if(str.charAt(index) == '-'){
	        sign = -1;
	        index--;
	    }
	  
	    long num = 0;
	    for(; index < str.length();index++){
	          if(str.charAt(index) <'0' || str.charAt(index) > '9'){
	              break;
	          }
	          num = num * 10 + (str.charAt(index) - '0');
	          if(num > Integer.MAX_VALUE){
	              break;
	          }
	    }
	    if(num * sign >= Integer.MAX_VALUE){
	        return Integer.MAX_VALUE;
	    }
	    if(num * sign <= Integer.MIN_VALUE){
	        return Integer.MIN_VALUE;
	    }
	    
	    return (int)(num * sign);
	 }
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
