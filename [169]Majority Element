Majority Element 
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.

/**
*Solution 1
*每找出两个不同的element，就成对删除即count--，最终剩下的就是所求的element。
*时间复杂度：O(n)
*/

public class Solution {
    public int majorityElement(int[] nums) {
        if(nums.length == 1){
            return nums[0];
        }
        int time = 0;
        int target = nums[0];
        for(int i=0; i<nums.length;i++){
            if(time == 0){
                target = nums[i];
                time = 1;
            }else{
                 if(target == nums[i]){
                    time++;
                 }else{
                    time--;
                }
            }
           
        }
        return target;
    }
}

/**
*Solution 2
* 先用Arrays.sort()排序，返回array.length/2 位置的元素即是。
*/

public int majorityElement(int[] array){
		if(array.length == 1){
			return array[0];
		}
		Arrays.sort(array);
		return array[array.length/2];
	}

/**
*Solution 3
* 先用Arrays.sort()排序，然后再比较个数
*/
public class Solution{
  public int majorityElement(int[] array){
    if(array.length == 1){
      return array[0];
    }
    Arrays.sort(array);
    int count = 1;
    int target = array[0];
    for(int i=1;i<array.length;i++){
      if(target == array[i]){
        count++;
        if(count > array.length/2){
          return array[i];
        }
      }else{
        count = 1;
        target = array[i];
      }
    }
    return 0;
  }
}

/**
*Solution 4
* 用 HashMap
*/
public class Solution{
  public int majorityElement(int[] array){
    HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
    if(array.length == 1){
      return array[0];
    }
    for(int i=0;i<array.length;i++){
      int ElementCount = 1;
      if(map.containsKey(array[i])){
        ElementCount = map.get(array[i]) + 1;
      }
      map.put(array[i],ElementCount);
    }
    Iterator<Entry<Integer, Integer>> iterator = map.entrySet().iterator();
    while(iterator.hasNext()){
      Map.Entry<Integer, Integer> entry = iterator.next();
			if(entry.getValue() > (array.length/2)){
				return entry.getKey();
			}
    }
    return 0;
  }
}

