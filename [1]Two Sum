/**
	 * Two Sum
	 * 
	 * Given an array of integers, find two numbers such that they add up to a
	 * specific target number.
	 * 
	 * The function twoSum should return indices of the two numbers such that
	 * they add up to the target, where index1 must be less than index2. Please
	 * note that your returned answers (both index1 and index2) are not
	 * zero-based.
	 * 
	 * You may assume that each input would have exactly one solution.
	 * 
	 * Input: numbers={2, 7, 11, 15}, target=9 
	 * 
	 * Output: index1=1, index2=2
	 * 
	 */
	 /**
	 *Solution 1
	 */
	 
	 public int[] twoSum(int[] nums, int target){
	      HashMap<Integer, Integr> map = new HashMap<Integer, Integer>();
	      int[] result = new int[2];
	      for(int i=0; i<nums.length;i++){
	          int x = target - nums[i];
	          if(map.containsKey(x)){
	              result[0] = map.get(x);
	              result[1] = i + 1;
	              return result;
	          }else{
	              map.put(nums[i], i+1);
	          }
	      }
	      return result;
	 }
	 /**
	 *Solution 2
	 */
	 public int[] twoSum(int[] nums, int target){
	      if(nums == null || nums.length < 2){
	          return null;
	      }
	      HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
	      for(int i=0; i<nums.length; i++){
	          map.put(nums[i], i+1);
	      }
	      int[] result = new int[2];
	      for(int i=0; i<nums.length; i++){
	          if(map.containsKey(target - nums[i])){
	              int index1 = i + 1;
	              int index2 = map.get(target - nums[i]);
	              if(index1 == index2){
	                  continue;
	              }
	              result[0] = index1;
	              result[1] = index2;
	              return result;
	          }
	      }
	      return result;
	 }
	 
	 /**
	 *Solution 3
	 */
	 public int[] twoSum(int[] nums, int target){
	      if(nums == null || nums.length < 2){
	            return null;
	      }
	      
	      int[] result = new int[2];
	      int length = nums.length;
	      int left = 0, right = length - 1;
	      int[] numsSort = Arrays.copyOf(nums, nums.length);
	      
	      Arrays.sort(numsSort);
	      for(int i=0; i<length; i++){
	          int sum = numsSort[left] + numsSort[right];
	          if(sum > target){
	              right--;
	          }else if(sum < target){
	              left++;
	          }else{
	              break;
	          }
	      }
	      
	      for(int i =0; i<length; i++){
	          if(nums[i] == numsSort[left]){
	                result[0] = i;
	          }
	      }
	      
	      for(int i=0; i<length; i++){
	          if(nums[i] == numsSort[right] && i != result[0]){
	              result[1] = i;
	          }
	      }
	      
	      if(result[0] > result[1]){
	          int temp = result[0];
	          result[0] = result[1];
	          result[1] = temp;
	      }
	      
	      result[0] = result[0] + 1;
	      result[1] = result[1] + 1;
	      return result;
	 }
	 
	 
	 
	 
