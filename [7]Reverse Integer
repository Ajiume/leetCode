/**
	 * 
	 * Reverse Integer
	 * 
	 * Reverse digits of an integer.
	 * 
	 * Example1: x = 123, return 321
	 * 
	 * Example2: x = -123, return -321
	 * 
	 * Have you thought about this? Here are some good questions to ask before
	 * coding. Bonus points for you if you have already thought through this!
	 * 
	 * If the integer's last digit is 0, what should the output be? ie, cases
	 * such as 10, 100.
	 * 
	 * Did you notice that the reversed integer might overflow? Assume the input
	 * is a 32-bit integer, then the reverse of 1000000003 overflows. How should
	 * you handle such cases?
	 * 
	 * For the purpose of this problem, assume that your function returns 0 when
	 * the reversed integer overflows.
	 * 
	 * Update (2014-11-10): Test cases had been added to test the overflow
	 * behavior.
	 * 
	 */
	
	public int reverse(int x){
		int length = String.valueOf(x).length();
		if(x < 0){
			length = length - 1;
		}
		
		Long res = 0L;
		while( x != 0 && length >=1){
			int digit = x % 10;
			res = (long) (res + digit * Math.pow(10, length - 1));
			x = x / 10;
			length--;
		}
		if(res > 2147483647 || res < -2147483648){
			return 0;
		}else{
			return res.intValue();
		}
	}
