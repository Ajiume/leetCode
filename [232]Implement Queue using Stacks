/**
	 * Implement Queue using Stacks 
	 * 
	 * 
	 * Implement the following operations of a queue using stacks.
	 *
	 *	push(x) -- Push element x to the back of queue.
	 *	pop() -- Removes the element from in front of queue.
	 *	peek() -- Get the front element.
	 *	empty() -- Return whether the queue is empty.
	 *	Notes:
	 *	You must use only standard operations of a stack 
	 *		-- which means only push to top, peek/pop from top, size, and is empty operations are valid.
	 *
	 *	Depending on your language, stack may not be supported natively. 
	 *		You may simulate a stack by using a list or deque (double-ended queue), 
	 *			as long as you use only standard operations of a stack.
	 *
	 *	You may assume that all operations are valid 
	 *		(for example, no pop or peek operations will be called on an empty queue).
	 * 
	 * 
	 * 
	 * 
	 */
	 public class MyQueue{
	      
	      Stack<Integer> in = new Stack<Integer>();
	      Stack<Integer> out = new Stack<Integer>();
	      
	      public void push(int x){
	          in.push(x);
	      }
	      
	      public void pop(){
	          peek();
	          out.pop();
	      }
	      
	      public int peek(){
	          if(out.isEmpty()){
	              while(!in.isEmpty()){
	                  out.push(in.pop());
	              }
	          }
	          return out.pop();
	      }
	     
	     public boolean empty(){
	        return in.isEmpty() && out.isEmpty();
	     }
	 
	 }
	 
	 /**
	 * 
	 * 
	 * I. Implement Stack using Queues
	 *
	 * Implement the following operations of a stack using queues. push(x) --
	 * Push element x onto stack. pop() -- Removes the element on top of the
	 * stack. top() -- Get the top element. empty() -- Return whether the stack
	 * is empty. Notes: You must use only standard operations of a queue --
	 * which means only push to back, peek/pop from front, size, and is empty
	 * operations are valid. Depending on your language, queue may not be
	 * supported natively. You may simulate a queue by using a list or deque
	 * (double-ended queue), as long as you use only standard operations of a
	 * queue. You may assume that all operations are valid (for example, no pop
	 * or top operations will be called on an empty stack).
	 *
	 * Solution
	 *
	 * Time: push() ~ O(1), pop() ~ O(N), top() ~ O(1) and O(N) in worst-case
	 * (if pop() is called twice), empty() ~ O(1) Space ~ O(N) Use two Queues:
	 * q2 stores the latest element (only one), and q1 stores the rest elements.
	 * push(): enqueue elements to q2, and if there're more than one elements in
	 * q2, then dequeue them to q1; pop(): 1) do top() first. If q2 is empty (if
	 * pop() is continuously called more than twice), then move the last element
	 * in q1 to q2; 2) dequeue the element in q2. top(): 1) if q2 is empty, then
	 * circulate q1 to move its last element to front, and dequeue it to q2; 2)
	 * return q2.peek(); empty(): MyStack is empty iff both q1 and q2 are empty.
	 * 
	 */
	 
	 public class MyQueue{
	      private Queue<Integer> q1 = new LinkedList<>();
		    private Queue<Integer> q2 = new LinkedList<>(); // store the latest element

	  	 // Push element x onto stack.
	  	 public void push(int x) {
	    		q2.add(x);
		    	while (q2.size() > 1)
			  	q1.add(q2.poll());
	  	}

		// Removes the element on top of the stack.
		public void pop() {
			top(); // if q1 is not empty but q2 is empty, need update q2 first
			q2.poll();
		}

		// Get the top element.
		public int top() {
			if (q2.isEmpty()) { // move the last element in q1 to q2
				for (int i = 0; i < q1.size() - 1; i++)
					q1.add(q1.poll());
				q2.add(q1.poll());
			}
			return q2.peek();
		}

		// Return whether the stack is empty.
		public boolean empty() {
			return q1.isEmpty() && q2.isEmpty();
		}
	 
	 }
	      
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
