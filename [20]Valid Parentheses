/**
	 * Valid Parentheses
	 * 
	 * Given a string containing just the characters '(', ')', '{', '}', '[' and
	 * ']', determine if the input string is valid. The brackets must close in
	 * the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]"
	 * are not.
	 * 
	 * 
	 */
	 
	 /**
	 *Solution 1
	 */
	 public boolean isValid(String s){
	      Stack<Character> stack = new Stack<Character>();
	      for(int i = 0; i< s.length(); i++){
	          char c = s.charAt(i);
	          if(c == '(' || c == '[' || c == '{'){
	              stack.push(c);
	          }else if(c == ')' || c ==']' || c == '}'){
	              if(stack.size() == 0){
	                  return false;
	              }
	              char ctop = stack.pop();
	              if(ctop == '(' && c == ')'){
	                  continue;
	              }else if(ctop == '[' && c == ']'){
	                  continue;
	              }else if(ctop == '{' && c == '}'){
	                  continue;
	              }
	              return false;
	          }
	      }
	      return stack.size() == 0;
	 }
	 
	 /**
	 *Solution 2
	 */
	 public boolean isValid(String s) {
        HashMap<Character, Character> map = new HashMap<Character, Character>();
        map.put('(', ')');
        map.put('[',']');
        map.put('{','}');
        
        Stack<Character> stack = new Stack<Character>();
        for(int i = 0; i<s.length();i++){
            char curr = s.charAt(i);
            if(map.keySet().contains(curr)){
                stack.push(curr);
            }else if(map.values().contains(curr)){
                if(!stack.isEmpty() && map.get(stack.peek()) == curr){
                    stack.pop();
                }else{
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
	 
