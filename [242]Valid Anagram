/**
	 * Valid Anagram 
	 * 
	 * Given two strings s and t, write a function to determine if t is an anagram of s.
	 *
	 *	For example,
	 *	s = "anagram", t = "nagaram", return true.
	 *	s = "rat", t = "car", return false.
	 *
	 *	Note:
	 *	You may assume the string contains only lowercase alphabets.
	 */
	 
	/**
	*solution1
	*/
	public class Solution{
		public boolean isAnagram(String s, String t){
			if(s.length != t.length){
				return false;
			}	
			char[] str = s.toCharArray();
			char[] ttr = t.toCharArray();
			Arrays.sort(str);
			Arrays.sort(ttr);
			
			return String.valueOf(str.toString()).equals(String.valueOf(ttr.toString()));
		}
	}
	
	/**
	*solution2
	*/
	public boolean isAnagram(String s, String t){
		if(s.equals(t)){
			return true;
		}
		if(s == null || t== null || s.length() != t.length()){
			return false;
		}
		
		HashMap<Character, Integer> sMap = new HashMap<Character, Integer>();
		HashMap<Character, Integer> tMap = new HashMap<Character, Integer>();
		for(int i=0;i<s.length();i++){
			if(sMap.containsKey(s.charAt(i))){
				sMap.put(s.charAt(i), sMap.get(s.charAt(i))+1);
			}else{
				sMap.put(s.charAt(i), 1);
			}
			
			if(tMap.containsKey(t.charAt(i))){
				tMap.put(t.charAt(i), tMap.get(t.charAt(i)) + 1);
			}else{
				tMap.put(t.charAt(i), 1);
			}
		}
		
		for(Character key : sMap.keySet()){
			if(!tMap.containsKey(key) || !tMap.get(key).equals(sMap.get(key))){
				return false;
			}
		}
		
		return true;
	}
	
	
	
	
	
	
	
	
	
	
